upstream code-server {
        # 같은 Pod에서 배포되기 때문에, Code-Server의 주소는 localhost로 진행(PORT 확인은 필요)
        server localhost:8443;
}


# workflow 정리 
# code 서버에 / 로 접근하면, auth_request 를 통해서 API 서버로 인증 요청을 한다.
# 최초에는 code-server token 만 존재하고 접속자 token 이 없어 401이 발생하며, 
# 401 발생시에 front page 로 이동해서 user 의 token 을 cookie 로 획득하고, 다시 code-server 리다이렉트 시키며
# get parameter 로 token 을 전송 한다. 
# 다시 auth_request 를 통해서 user token 과 code-server token 을 전송하면 
# 서버에서 둘다 복호화 해서 비교처리 후 인증을 완료 시킨다.
#
# fallback 
# auth_request 가 연결이 안되거나 500 시리즈를 리턴하면, fallback 으로 전송하여 인증 없이 진입 시킨다.
# 이때 웹 소켓 통신은 200이 아닌 101로 재처리 한다.
server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name codeserver;

        # auth request 에서 제외해야 하는 컨텐츠들 주로 static
        location / {
                proxy_set_header  X-Real-IP $remote_addr;
                proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header  Host $http_host;
                proxy_set_header  Upgrade $http_upgrade;
                proxy_set_header  Connection upgrade;

                proxy_pass http://code-server;
        }

        # websocket url 필터


        # api 서버의 오류가 발생할 경우 fallback 
        location @fallback {
                proxy_set_header  X-Real-IP $remote_addr;
                proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header  Host $http_host;
                proxy_set_header  Upgrade $http_upgrade;
                proxy_set_header  Connection upgrade;
                
                proxy_pass http://code-server;
        }

        # auth request 에 포함되어야 할 리퀘스트
        location ~ ^/$ {
                # auth_request 를 수행할 location
                auth_request /auth;
                # auth_reuqest 의 응답으로 받은 pod_host 정보 
                auth_request_set $pod_host $sent_http_pod_host;
                # 요청했던 주소
                auth_request_set $original_uri $sent_http_original_uri;
                # 직접 전달 받은 유저 토큰의 정보
                set $auth_curuser_token $arg_curuser;
                
                proxy_set_header  X-Real-IP $remote_addr;
                proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header  Host $http_host;
                proxy_set_header  Upgrade $http_upgrade;
                proxy_set_header  Connection upgrade;

                # 인증절차에 성공하면 code-server로 이동
                # 실패하면 Status Code에 맞게 분기처리
                #  - 401(Unauthorized): 접근자의 토큰이 Header에 없는 경우
                #  - 403(Forbidden): 접근자 토큰과 생성자 토큰이 일치하지 않는 경우
                #  - 500: 
                
                proxy_pass http://code-server;
                error_page 401 http://CATALOG_URL_EXT/code-server/auth-check/error/401?ref-url=$sent_http_pod_host&$sent_http_original_uri;
                error_page 403 http://CATALOG_URL_EXT/code-server/auth-check/error/403/;
                # 연결 끊김 상태 502/503 가 발생하면 그냥 코드서버로 진입 시킨다.-- fall back 처리
                error_page 500 =200 @fallback; 
                # websocket fallback
                error_page 418 =101 @fallback; 
                # web socket bypass
                if ( $args ~ "type=" ) { 
                        return 418;        
                }
        }

        # SSO 인증으로 사용자 일치여부 확인해주는 API 서버로 전달
        location /auth {
                internal;

                proxy_method      GET;
                proxy_set_header  X-Real-IP $remote_addr;
                proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header  X-Original-URI $request_uri;
                # proxy_set_header  X-Original-METHOD $request_method;
                proxy_set_header  Host $http_host;
                proxy_set_header  Referer $http_referer;
                proxy_set_header  Upgrade $http_upgrade;
                proxy_set_header  Connection upgrade;
                proxy_set_header  auth_creator_token USER_TOKEN;
                proxy_set_header  auth_curuser_token $auth_curuser_token;
                proxy_cache_bypass $http_upgrade;

                # header on
                proxy_pass_request_headers on;
                # 통신하려는 API 서버 주소
                proxy_pass        http://CATALOG_URL/api_v1/code-server/auth-check/; 
       }
}